name: 更新股债利差与巴菲特指标图表

on:
  schedule:
    # 每天北京时间 09:00 (UTC 01:00)
    - cron: '0 1 * * *'
    # 每天北京时间 16:00 (UTC 08:00)  
    - cron: '0 8 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  update-charts:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install akshare pandas matplotlib seaborn
        
    - name: 配置中文字体
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-noto-cjk
        # 创建字体缓存
        fc-cache -fv
        
    - name: 生成股债利差图表
      run: |
        python -c "
import sys
sys.path.append('.')
import akshare as ak
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib.font_manager as fm
from matplotlib import dates as mdates
import warnings
warnings.filterwarnings('ignore')

# 设置中文字体
plt.rcParams['font.sans-serif'] = ['Noto Sans CJK SC', 'SimHei', 'DejaVu Sans']
plt.rcParams['axes.unicode_minus'] = False

# 设置非交互式后端
plt.switch_backend('Agg')

try:
    print('正在获取股债利差数据...')
    stock_ebs_lg_df = ak.stock_ebs_lg()
    print('数据获取成功！')
    
    stock_ebs_lg_df['日期'] = pd.to_datetime(stock_ebs_lg_df['日期'])
    stock_ebs_lg_df.set_index('日期', inplace=True)
    stock_ebs_lg_df = stock_ebs_lg_df.loc['2010-01-01':]
    
    window = 5 * 252
    stock_ebs_lg_df['5年均线'] = stock_ebs_lg_df['股债利差'].rolling(window=window, min_periods=1).mean()
    stock_ebs_lg_df['5年标准差'] = stock_ebs_lg_df['股债利差'].rolling(window=window, min_periods=1).std()
    stock_ebs_lg_df['+1 STD'] = stock_ebs_lg_df['5年均线'] + 1 * stock_ebs_lg_df['5年标准差']
    stock_ebs_lg_df['-1 STD'] = stock_ebs_lg_df['5年均线'] - 1 * stock_ebs_lg_df['5年标准差']
    stock_ebs_lg_df['+2 STD'] = stock_ebs_lg_df['5年均线'] + 2 * stock_ebs_lg_df['5年标准差']
    stock_ebs_lg_df['-2 STD'] = stock_ebs_lg_df['5年均线'] - 2 * stock_ebs_lg_df['5年标准差']
    
    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax1 = plt.subplots(figsize=(16, 8))
    
    ax1.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['股债利差'], label='股债利差', color='royalblue', linewidth=1.5, zorder=5)
    ax1.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['5年均线'], label='5年均线', color='orange', linestyle='--', linewidth=2, zorder=5)
    ax1.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['+1 STD'], color='gray', alpha=0.6, linestyle=':', linewidth=1, label='±1 标准差')
    ax1.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['-1 STD'], color='gray', alpha=0.6, linestyle=':', linewidth=1)
    ax1.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['+2 STD'], color='gray', alpha=0.8, linestyle='--', linewidth=1.2, label='±2 标准差')
    ax1.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['-2 STD'], color='gray', alpha=0.8, linestyle='--', linewidth=1.2)
    
    last_value = stock_ebs_lg_df['股债利差'].iloc[-1]
    ax1.axhline(y=last_value, color='darkred', linestyle=':', linewidth=1.5, label=f'当前值: {last_value:.2%}')
    
    ax1.yaxis.set_major_formatter(mticker.PercentFormatter(xmax=1.0))
    ax1.tick_params(axis='y', labelcolor='royalblue')
    
    ax2 = ax1.twinx()
    ax2.plot(stock_ebs_lg_df.index, stock_ebs_lg_df['沪深300指数'], label='沪深300指数 (右轴)', color='red', alpha=0.6, linewidth=1.5)
    ax2.tick_params(axis='y', labelcolor='red')
    
    ax1.xaxis.set_major_locator(mdates.YearLocator())
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y年'))
    ax1.xaxis.set_minor_locator(mdates.MonthLocator())
    
    ax1.set_title('股债利差 vs. 沪深300指数', fontsize=20, pad=20)
    ax1.set_xlabel('日期', fontsize=12)
    ax1.set_ylabel('股债利差 (风险溢价)', fontsize=14, color='royalblue')
    ax2.set_ylabel('沪深300指数', fontsize=14, color='red')
    
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax1.legend(lines + lines2, labels + labels2, loc='upper left')
    
    ax1.grid(True, which='major', axis='x', linestyle='--', linewidth=0.7)
    ax1.grid(True, which='minor', axis='x', linestyle=':', linewidth=0.4)
    ax1.grid(True, which='major', axis='y', linestyle='--', linewidth=0.7)
    
    plt.tight_layout()
    plt.savefig('equity_bond_spread.png', dpi=300, bbox_inches='tight', facecolor='white')
    print('股债利差图表已保存')
    
except Exception as e:
    print(f'生成股债利差图表时发生错误: {e}')
    import traceback
    traceback.print_exc()
"
        
    - name: 生成巴菲特指标图表
      run: |
        python -c "
import sys
sys.path.append('.')
import akshare as ak
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib.font_manager as fm
from matplotlib import dates as mdates
import warnings
warnings.filterwarnings('ignore')

# 设置中文字体
plt.rcParams['font.sans-serif'] = ['Noto Sans CJK SC', 'SimHei', 'DejaVu Sans']
plt.rcParams['axes.unicode_minus'] = False

# 设置非交互式后端
plt.switch_backend('Agg')

try:
    print('正在获取巴菲特指标数据...')
    buffett_df = ak.stock_buffett_index_lg()
    print('数据获取成功！')
    
    buffett_df['日期'] = pd.to_datetime(buffett_df['日期'])
    buffett_df.set_index('日期', inplace=True)
    buffett_df['巴菲特指标'] = buffett_df['总市值'] / buffett_df['GDP']
    buffett_df = buffett_df.loc['2010-01-01':]
    
    last_row = buffett_df.iloc[-1]
    current_indicator_value = last_row['巴菲特指标']
    total_percentile = last_row['总历史分位数']
    
    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax1 = plt.subplots(figsize=(16, 8))
    
    ax1.axhspan(0, 0.8, color='lightgreen', alpha=0.5, zorder=0, label='低估区域 (<0.8)')
    ax1.axhspan(0.8, 1.0, color='yellow', alpha=0.4, zorder=0, label='合理区域 (0.8-1.0)')
    ax1.axhspan(1.0, 1.2, color='orange', alpha=0.4, zorder=0, label='高估区域 (1.0-1.2)')
    ax1.axhspan(1.2, buffett_df['巴菲特指标'].max() + 0.1, color='lightcoral', alpha=0.5, zorder=0, label='危险区域 (>1.2)')
    
    ax1.plot(buffett_df.index, buffett_df['巴菲特指标'], label='巴菲特指标', color='dodgerblue', linewidth=2, zorder=5)
    ax1.axhline(y=current_indicator_value, color='darkred', linestyle=':', linewidth=1.5, label=f'当前值: {current_indicator_value:.2%}')
    
    ax1.yaxis.set_major_formatter(mticker.PercentFormatter(xmax=1.0))
    ax1.tick_params(axis='y', labelcolor='dodgerblue')
    ax1.set_ylim(bottom=0)
    
    ax2 = ax1.twinx()
    ax2.plot(buffett_df.index, buffett_df['收盘价'], label='上证综指 (右轴)', color='purple', alpha=0.6, linewidth=1.5)
    ax2.tick_params(axis='y', labelcolor='purple')
    
    ax1.xaxis.set_major_locator(mdates.YearLocator())
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y年'))
    ax1.xaxis.set_minor_locator(mdates.MonthLocator())
    
    title_text = f'巴菲特指标 (A股总市值/GDP) vs. 上证综指\n当前历史分位: {total_percentile:.2%}'
    ax1.set_title(title_text, fontsize=20, pad=20)
    ax1.set_xlabel('日期', fontsize=12)
    ax1.set_ylabel('总市值 / GDP', fontsize=14, color='dodgerblue')
    ax2.set_ylabel('上证综指', fontsize=14, color='purple')
    
    lines, labels = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax1.legend(lines + lines2, labels + labels2, loc='upper left')
    
    ax1.grid(True, which='major', axis='x', linestyle='--', linewidth=0.7)
    ax1.grid(True, which='minor', axis='x', linestyle=':', linewidth=0.4)
    ax1.grid(True, which='major', axis='y', linestyle='--', linewidth=0.7)
    
    plt.tight_layout()
    plt.savefig('buffett_indicator.png', dpi=300, bbox_inches='tight', facecolor='white')
    print('巴菲特指标图表已保存')
    
except Exception as e:
    print(f'生成巴菲特指标图表时发生错误: {e}')
    import traceback
    traceback.print_exc()
"
        
    - name: 提交更新的图表
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add *.png
        git diff --staged --quiet || git commit -m "自动更新图表 - $(date +'%Y-%m-%d %H:%M:%S')"
        git push
